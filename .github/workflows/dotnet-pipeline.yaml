name: SonarQube Cloud and Deploy to GCP VM

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build:
    name: Build, Analyze, and Deploy
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Step 2: Set up .NET Core SDK
      - name: Setup .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.x'

      # Step 3: Install dependencies
      - name: Install dependencies
        run: dotnet restore

      # Step 4: SonarCloud analysis start
      - name: SonarCloud Scan - Begin
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu'
      - name: Start SonarCloud Analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin /k:"rajat-cloudtechner_CustomerManagementWebApp" /o:"rajat-cloudtechner" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"

      # Step 5: Build the solution
      - name: Build the solution
        run: dotnet build --no-restore --configuration Release

      # Step 6: SonarCloud analysis end
      - name: SonarCloud Scan - End
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"

      # Step 7: Publish the application
      - name: Publish application
        run: dotnet publish -c Release -o ./publish

      - name: Create SSH Key File
        run: |
          echo "${{ secrets.GCP_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem

      # Step 8: Deploy the application to GCP VM via SCP
      - name: Deploy to GCP VM
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          source: "./publish/*"
          target: "/home/${{ secrets.GCP_VM_USER }}/customerapp/"
          debug: true

      # Step 9: SSH into GCP VM and run the application
      - name: SSH and Run App
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.GCP_VM_IP }}
          username: ${{ secrets.GCP_VM_USER }}
          key: ${{ secrets.GCP_SSH_PRIVATE_KEY }}
          script: |
            cd /home/${{ secrets.GCP_VM_USER }}/customerapp
            nohup dotnet CustomerManagementWebApp.dll --urls "http://0.0.0.0:5329" &
